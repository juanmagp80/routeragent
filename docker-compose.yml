version: '3.8'

services:
  # Servicio de backend AgentRouter
  agentrouter-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - ./agentrouter-backend:/app/agentrouter-backend
      - /app/agentrouter-backend/node_modules
    depends_on:
      - supabase-db
    networks:
      - agentrouter-network

  # Servicio de base de datos Supabase (simulado)
  supabase-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=agentrouter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - supabase-data:/var/lib/postgresql/data
    networks:
      - agentrouter-network

  # Servicio de Redis para caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agentrouter-network

  # Servicio de Prometheus para m√©tricas
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - agentrouter-network

  # Servicio de Grafana para dashboards
  grafana:
    image: grafana/grafana-enterprise:10.0.3
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - agentrouter-network

networks:
  agentrouter-network:
    driver: bridge

volumes:
  supabase-data:
  redis-data:
  prometheus-data:
  grafana-data: